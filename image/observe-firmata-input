#!/usr/bin/perl

=encoding utf-8
=head1 NAME

C<observe-firmata-input> - Firmata input observer


=head1 SYNOPSIS

A command line tool to observe input pins of a microcontroller using the
Firmata protocol.


=head1 DESCRIPTION

This program connects to a microcontroller (e.g. Arduino) using the Firmata
protocol and observes its input pins. For each value change of an observed pin,
an external command is called with the following arguments: 

 pin name value timestamp duration count total rate

=head2 Arguments

Illustration of a value change:

  ──┐               ┌──  1
    │←───── d ─────→│
    └───────────────┘    0
                    ↑    ↑
                    t    v

  v: value
  t: timestamp
  d: duration

=over 4

=item C<pin>

An integer containing the pin number.

=item C<name>

A string containing a name for the connected device.

=item C<value>

The value as reported by Firmata, e.g. C<0> or C<1>.

=item C<timestamp>

A decimal containing the timestamp of the value change.
The integer part contains a unix timestamp (seconds since epoch).
The fractional part has a precision of 9 digits (nanoseconds).

=item C<duration>

A decimal containing the duration since the previous value change with a
precision of 9 digits (nanoseconds).

=item C<count>

An integer containing ths pin's number of changes to the current value.

=item C<total>

An integer containing the pin's total number of changes.

=item C<rate>

A string containing the value change rate per hour with an optional unit.

=back

=head2 Example

 '9' 'boiler' '1' '1591428675.880354881' '2.1215808391571' '3' '5' '1696.85 W'

Explanation: pin B<9> with name B<boiler> has changed to value B<1> at
B<1591428675.880354881> (2020-06-06 07:31:15 and 880 ms, 385 µs, 881 ns).
Before the change, the pin was stable for about B<2.122> seconds (with value 0).
This is the B<3>rd time that pin 9 changed to 1.
The total number of value changes (either 0 → 1 or 1 → 0) of pin 9 is B<5>.
If we suppose that an energy meter is connected and 1 Wh has been consumed
within the duration, then the duration corresponds to the power of B<1696.85 W>.

=head1 OPTIONS

Most options may either be set as command line arguments (e.g. B<-c>,
B<--command>) or environment variables (e.g. B<C<FIRMATA_COMMAND>>).

=over 8

=item B<-c> I<command>, B<--command>=I<command>, B<C<FIRMATA_COMMAND>>=I<command>

Command that is run for each message.

=item B<-d> I<device>, B<--device>=I<device>, B<C<FIRMATA_DEVICE>>=I<device>

Serial firmata device to read messages from.

=item B<-h>, B<--help>

Show usage and exit.

=item B<-i> I<interval>, B<--interval>=I<interval>, B<C<FIRMATA_INTERVAL>>=I<interval>

Poll interval in milliseconds. When detection strategy is C<instant>, value
changes are reported instantly, not only between poll intervals (see
I<Pin Configuration> / I<Detection strategy>).

=item B<-p> I<pin>[I<:name>[I<:configuration>]], B<--pin>=I<pin>[I<:name>[I<:configuration>]],
B<C<FIRMATA_PINS>>=I<pin>[I<:name>[I<:configuration>]][,I<pin>[I<:name>[I<:configuration>]]...]

Pin number with optional name and pin configuration. See section I<Pin Configuration>
for details. To observe multiple pins, repeat the command line argument
or assign a comma-separated list to the environment variable.

=item B<-t> I<configuration>, B<--template> I<configuration>, B<C<FIRMATA_TEMPLATE>>=I<configuration>

A template containing the default pin configuration for all pins.
See section I<Pin Configuration> for details.

=item B<-v>, B<--verbose>, B<C<FIRMATA_VERBOSITY>>=I<verbosity>

Log more verbose.

=back

=head2 Pin Configuration

A I<pin configuration> is a colon-separated list of the properties listed in
this section. All properties are optional, trailing colons may be omitted.

=over 2

=item Example for an optical energy meter sending a C<LOW> impulse for every Wh:

C<pullup:instant:falling:1:W>

=item Example for a mechanical water meter sending 2000 C<LOW> impulses for every m³:

C<pullup:debounce:falling:2000:m³/h>

=item Example for a mechanical switch:

C<pullup:debounce>

=item Example for use of the default configuration with debouncing and unit C<W>:

C<:debounce:::W>

=back

=head3 Pin Mode

Supported pin modes: C<input>, C<pullup>. Default: C<input>.

See L<Digital Pins|https://www.arduino.cc/en/Tutorial/DigitalPins> in the
Arduino Tutorial for details.

=head3 Detection strategy

Supported detection strategies: C<instant>, C<debounce>. Default: C<instant>.

=over

=item C<instant>:

Changes will be reported instantly.

=item C<debounce>:

Value changes will be buffered until the
current poll interval has elapsed (see B<--interval>). This may help when
bouncing switches are connected to the Firmata device. Please note that this
option effectively reduces the sample rate to the poll interval, thus the poll
interval should be chosen carefully according to the connected hardware.

=back

=head3 Rate trigger

Supported rate triggers: C<none>, C<falling>, C<rising>, C<any>. Default: C<none>.

When rate trigger ist set, the value changes are supposed to come from a meter
device, and a I<rate> per hour is calculated as C<3600 / (frequency * duration)>.

=over

=item C<falling>:

The rate will be calculated for every value change from C<1> to C<0>.

=item C<rising>:

The rate will be calculated for every value change from C<0> to C<1>.

=item C<any>:

The rate will be calculated for every value change.

=item C<none>:

The rate will not be calculated.

=back

=head3 Rate frequency

The frequency tells how many changes per hour the meter device emits.

Supported frequencies: positive numbers

=head3 Rate unit

The unit contains the unit of the meter device. It is appended to the rate.


=head1 EXAMPLES

=over

=item

 observe-firmata-input --pin 2

Connect to firmata device at C</dev/ttyUSB0>,
configure pin C<2> as digital input with pullup,
log messages to stderr
and report pin changes to C<mqtt-publish>.

=item

 FIRMATA_PINS=2 FIRMATA_DEVICE=/dev/ttyUSB0 observe-firmata-input

Same as above.

=item

 observe-firmata-input -p 2::pullup -d /dev/ttyUSB0 -v

Same as above, but be verbose.

=item

 observe-firmata-input --pin 2:boiler:pullup --pin 3::input --device /dev/ttyUSB1 --interval 20 --command /bin/echo

Connect to firmata device at C</dev/ttyUSB1>,
configure pin C<2> named C<boiler> as digital input with pullup
and pin C<3> as digital input pin (without pullup),
poll every 20ms for changes,
log messages to stderr
and call C</bin/echo> for each change.

=item

 FIRMATA_PINS=2:boiler:pullup,3:input FIRMATA_DEVICE=/dev/ttyUSB1 FIRMATA_INTERVAL=20 FIRMATA_COMMAND=/bin/echo observe-firmata-input

Same as above.

=back

=cut


#----------------------------------------------------------------------

##
# Imports
##

use strict;
use warnings;
use sigtrap qw(handler handle_signal normal-signals);

use Data::Dumper;
use FindBin;
use Device::Firmata;
use Device::Firmata::Constants qw(:all);
use Getopt::Long qw(GetOptions);
use Time::HiRes qw(time);
use Try::Tiny;


#----------------------------------------------------------------------

##
# Constants
##

use constant RETURN_CODE_SUCCESS => 0;

use constant PIN_MODES => {
  'input'  => PIN_INPUT,
  'pullup' => PIN_PULLUP
};

use constant STRATEGIES => (
  'instant',
  'debounce'
);

use constant TRIGGERS => {
  'none' => '',
  'any', => '[01]',
  'falling', => '0',
  'rising' => '1'
};

# Configuration defaults
use constant {
  DEFAULT_COMMAND   => "$FindBin::Bin/mqtt-publish",
  DEFAULT_DEVICE    => '/dev/ttyUSB0',
  DEFAULT_FREQUENCY => 1,
  DEFAULT_INTERVAL  => 50,
  DEFAULT_PIN_MODE  => 'pullup',
  DEFAULT_STRATEGY  => 'instant',
  DEFAULT_TRIGGER   => 'none',
  DEFAULT_UNIT      => '',
  DEFAULT_VERBOSITY => 0
};
use constant {
  DEFAULT_TEMPLATE => join(':', DEFAULT_PIN_MODE, DEFAULT_STRATEGY, DEFAULT_TRIGGER, DEFAULT_FREQUENCY, DEFAULT_UNIT)
};


#----------------------------------------------------------------------

##
# Global variables
##

# External command to handle values reported by Firmata
my $command;

# Exit code for the main program. 'undefined' means: keep running
my $exit_code;

# Integer telling how verbose the program should be
my $verbose;

# Buffer for Firmata messages to allow debouncing. Content:
#
# $buffer
#   $pin
#     data
#       current
#         timestamp
#         value
#       0
#         timestamp
#         count
#       1
#         timestamp
#         count
#     frequency
#     name
#     strategy
#     trigger
#     unit
my $buffer = {};

#----------------------------------------------------------------------

##
# Internal subroutines
##

sub stopped {
  return defined $exit_code;
}

sub stop {
  my $code = shift // RETURN_CODE_SUCCESS;
  $exit_code = $code if (!stopped() or ($code > $exit_code));
}

sub out {
  foreach (@_) {
    say STDERR $_;
  }
}

sub verbose {
  if ($verbose > 0) {
    my $format = shift;
    out sprintf $format, @_;
  }
}

sub debug {
  verbose @_ if $verbose > 1;
}

sub info {
  out(@_);
}

sub warn {
  @_[0] = "Warning: $_[0]";
  out @_;
}

sub error {
  my ($message) = @_;
  stop(1);
  out("Error: $message") if $message;
}

sub handle_signal {
  stop();
  info "Stopping due to signal $_[0]";
}

sub show_usage {
  info "Usage: $0 [options]\n";
  info "Options:";
  info " -c, --command <command>   Command that is run for each message.";
  info "                           Default: '" . DEFAULT_COMMAND . "'";
  info " -d, --device <device>     Serial firmata device to read messages from.";
  info "                           Default: '" . DEFAULT_DEVICE . "'";
  info " -h, --help                Print this message and exit.";
  info " -i, --interval <interval> Poll interval in ms. Default: '" . DEFAULT_INTERVAL . "'";
  info " -p, --pin <pin>[:name[:<config>]] ";
  info "                           Pin number with optional name and pin configuration.";
  info "                           This option may be repeated for each pin.";
  info "                           <config> is a colon separated list of:";
  info "                             Pin mode:  " . join(', ', sort keys %{PIN_MODES()});
  info "                             Strategy:  " . join(', ', STRATEGIES);
  info "                             Trigger:   " . join(', ', sort keys %{TRIGGERS()});
  info "                             Frequency: a positive number";
  info "                             Unit:      a string";
  info " -t, --template <config>   Template with default configuration for all pins.";
  info "                           Default: '" . DEFAULT_TEMPLATE . "'";
  info " -v, --verbose             Log verbosely.";
  info "                           This option may be repeated to increase verbosity.";
  info "";
}


#----------------------------------------------------------------------

##
# Configuration subroutines
##

#
# Read and validate options from environment and the command line,
# apply defaults and store them in the returned configuration hash.
#
sub read_configuration {
  my ($config, $help, @pin_args);

  # read pins from environment variable
  @pin_args = split(',', $ENV{'FIRMATA_PINS'}) if defined $ENV{'FIRMATA_PINS'};

  # read command line options; pins are added to the existing ones
  error unless GetOptions(
      'command|c=s'    => \$config->{command},
      'device|d=s'     => \$config->{device},
      'help|h'         => \$help,
      'interval|i=s'   => \$config->{interval},
      'pin|p=s'        => \@pin_args,
      'template|t=s'   => \$config->{template},
      'verbose|v+'     => \$config->{verbose},
  );
  error "Unknown argument(s): " . join(",", @ARGV) if (@ARGV > 0);

  # command
  $config->{command}  //= $ENV{'FIRMATA_COMMAND'}  // DEFAULT_COMMAND;
  error "Command '$config->{command}' is not an executable file."
    unless -x $config->{command};

  # device
  $config->{device}   //= $ENV{'FIRMATA_DEVICE'}   // DEFAULT_DEVICE;
  error "Device '$config->{device}' is not a special character file."
    unless (-c $config->{device} or $help);

  # interval
  $config->{interval} //= $ENV{'FIRMATA_INTERVAL'} // DEFAULT_INTERVAL;
  error "Interval '$config->{interval}' is not a positive number."
    unless $config->{interval} =~ /^\d+$/;

  # template
  $config->{template} //= $ENV{'FIRMATA_TEMPLATE'} // DEFAULT_TEMPLATE;

  # pins
  $config->{pin_config} = read_pin_config($config->{template}, @pin_args);
  error "At least one pin argument is required."
    unless ($config->{pin_config} or $help);

  # verbose
  $config->{verbose} //= $ENV{'FIRMATA_VERBOSITY'} // DEFAULT_VERBOSITY;

  stop() if $help;

  return $config;
}


#
# Read and validate pin configuration from the command line and apply defaults.
#
sub read_pin_config {
  my ($template, @pin_args) = @_;

  my ($default_pin_mode, $default_strategy, $default_trigger, $default_frequency, $default_unit)
    = map { $_ eq '' ? undef : $_  } split(':', $template);

  $default_pin_mode = pick_choice($default_pin_mode, DEFAULT_PIN_MODE, 'Default pin mode',           keys %{PIN_MODES()});
  $default_strategy = pick_choice($default_strategy, DEFAULT_STRATEGY, 'Default detection strategy', STRATEGIES);
  $default_trigger  = pick_choice($default_trigger,  DEFAULT_TRIGGER,  'Default trigger',            keys %{TRIGGERS()});
  $default_frequency //= DEFAULT_FREQUENCY;
  error "Default frequency '$default_frequency' is not a positive number." if $default_frequency !~ /^\d+(\.\d+)?$/;

  my $pin_config;
  foreach (@pin_args) {
    my ($pin, $name, $pin_mode, $strategy, $trigger, $frequency, $unit)
      = map { $_ eq '' ? undef : $_  } split(':', $_);

    error "Pin argument '$pin' is not a positive integer." unless $pin =~ /^\d+$/;
    $pin_config->{$pin}->{name}      = $name;

    $pin_config->{$pin}->{mode}      = pick_choice($pin_mode, $default_pin_mode, "Pin mode for pin $pin",           keys %{PIN_MODES()});
    $pin_config->{$pin}->{strategy}  = pick_choice($strategy, $default_strategy, "Detection strategy for pin $pin", STRATEGIES);
    $pin_config->{$pin}->{trigger}   = pick_choice($trigger,  $default_trigger,  "Trigger for pin $pin",            keys %{TRIGGERS()});

    $frequency //= $default_frequency;
    error "Frequency for pin $pin '$frequency' is not a positive number." if ($frequency !~ /^\d+(\.\d+)?$/ or $frequency == 0);
    $pin_config->{$pin}->{frequency} = $frequency;

    $pin_config->{$pin}->{unit}      = $unit // $default_unit;
  }
  return $pin_config;
}

sub pick_choice {
  my ($choice, $default, $name, @options) = @_;

  $choice //= $default;
  error "$name '$choice' is not supported. Choose one of: " . join(', ', @options)
    unless grep(/^$choice$/, @options);
  return $choice;
}

sub apply_configuration {
  my ($config) = @_;
  $verbose = $config->{verbose};
  $command = $config->{command};
  foreach my $pin (sort {$a <=> $b} keys %{$config->{pin_config}}) {
    foreach ('frequency', 'name', 'strategy', 'unit') {
      $buffer->{$pin}->{$_} = $config->{pin_config}->{$pin}->{$_};
    }
    my $trigger_pattern = TRIGGERS->{$config->{pin_config}->{$pin}->{trigger}};
    $buffer->{$pin}->{trigger} = $trigger_pattern;
    debug "Trigger pattern for pin %d: %s", $pin, $trigger_pattern;
  }
  verbose "Configuration: %s", Data::Dumper->new([$config])->Terse(1)->Dump();
}

#----------------------------------------------------------------------

##
# Buffer subroutines
##

sub buffer_put {
  my ($pin, $value) = @_;
  my $now = sprintf("%.9f", time());
  $buffer->{$pin}->{data}->{current} = {
    value => $value,
    timestamp => $now
  };
  debug "%s: Received pin %02d = %s", $now, $pin, $value;
}

sub buffer_take {
  my ($pin) = @_;
  my $pin_info = $buffer->{$pin};
  my $data = $pin_info->{data};
  my $current = delete $data->{current};
  return if !defined $current;


################################################################################
#
#          ┌──────┐               ┌──  1
#          │      │←───── d ─────→│
#       ───┘      └───────────────┘    0
#          ↑      ↑               ↑    ↑
#          p      c               t    v
#
#  v: $value              current pin state value
#  t: $current_timestamp  timestamp of current pin state change
#  c: $change_timestamp   timestamp of previous pin state change
#  p: $previous_timestamp timestamp of previous change to current pin state
#  d: $duration           duration between previous change and current change
#
################################################################################

  my $value = $current->{value};
  my $inverted_value = $value ? 0 : 1;
  my $current_timestamp = $current->{timestamp};
  my $change_timestamp = $data->{$inverted_value}->{timestamp} // $current_timestamp;
  my $previous_timestamp = $data->{$value}->{timestamp} // $change_timestamp;
  $data->{$value}->{timestamp} = $current_timestamp;
  if ($previous_timestamp > $change_timestamp) {
    debug "Pin %02d: %s is repeated, ignoring ($previous_timestamp > $change_timestamp)", $pin, $value;
    return;
  }

  my $duration = $current_timestamp - $change_timestamp;
  my $state_count = ++$data->{$value}->{count};
  my $change_count = $state_count + ($data->{$inverted_value}->{count} // 0);

  my $state = {
    value     => $value,
    timestamp => $current_timestamp,
    duration  => $duration,
    count     => $state_count,
    total     => $change_count,
  };

  my $trigger = $pin_info->{trigger};
  if ($value =~ /^$trigger$/ and $duration > 0) {
    my $frequency = $pin_info->{frequency};
    my $rate = sprintf('%.2f', 3600.0 / ($frequency * $duration));
    my $unit = $pin_info->{unit};
    $rate .= " $unit" if defined $unit;
    $state->{rate} = $rate;
  }

  return $state;
}

sub buffer_report {
  my ($pin) = @_;
  my $state = buffer_take($pin);
  if (defined $state) {
    my $name = $buffer->{$pin}->{name} // '';
    my $rate = $state->{rate} // '';
    my @args = ($pin,
                $name,
                $state->{value},
                $state->{timestamp},
                $state->{duration},
                $state->{count},
                $state->{total},
                $rate);
    debug "Calling '%s' with args" . (" '%s'" x scalar(@args)), ($command, @args);
    system($command, @args) == 0
      or error "Command '$command' returned " . ($? >> 8) . ": $!";
  }
}


#----------------------------------------------------------------------

##
# Firmata subroutines
##

#
# Connect to a Firmata device.
#
sub firmata_connect {
  my ($device) = @_;

  info "Connecting to Firmata device at $device";
  my $platform = Device::Firmata->open($device);
  verbose "%s", "Connection established.";
  my $metadata = $platform->{metadata};
  my $firmware_version = $metadata->{firmware_version};
  foreach (keys %$COMMANDS) {
    $platform->{protocol}->{protocol_version} = $_ if ($firmware_version eq $_);
  }
  verbose "Server implementation: %s %s with protocol %s", $metadata->{firmware}, $firmware_version, $platform->{protocol}->{protocol_version};
  return $platform;
}

#
# Disconnect from a Firmata device.
#
sub firmata_disconnect {
  my ($platform) = @_;
  if (defined $platform) {
    $platform->close();
    info "Disconnected from Firmata device."
  }
}

#
# Configure pins on the connected Firmata device and start observing.
#
sub firmata_observe {
  my ($platform, $pin_config) = @_;
  my @pins = (sort {$a <=> $b} keys %{$pin_config});
  info "Observed pin(s): " . join(", ", @pins);
  foreach my $pin (@pins) {
    my $mode = PIN_MODES->{$pin_config->{$pin}->{mode}};
    verbose "Configuring pin %02d for mode %d", $pin, $mode;
    $platform->pin_mode($pin => $mode);
    $platform->observe_digital($pin, \&firmata_report);
  }
}

#
# Report pin values to external command.
# This subroutine is called by Firmata.
#
sub firmata_report {
  my ($pin, $old, $new) = @_;
  if ($old == $new) {
    debug "Ignoring firmata message because the value didn't change: pin %02i = %s", $pin, $new;
    return;
  }
  buffer_put($pin, $new);
  buffer_report($pin) if ('instant' eq $buffer->{$pin}->{strategy});
}

#
# Poll pin values until exit signal arrives.
#
sub firmata_poll {
  my ($platform, $interval) = @_;
  while (!stopped()) {
    $platform->poll;
    # sleep for $interval ms
    select undef, undef, undef, $interval/1000.0;
    foreach my $pin (keys %{$buffer}) {
      buffer_report($pin) if ('debounce' eq $buffer->{$pin}->{strategy});
    }
  }
}

#
# Connect and observe the Firmata device.
#
sub firmata_start {
  my ($config) = @_;
  my $platform;
  try {
    $platform = firmata_connect($config->{device});
    firmata_observe($platform, $config->{pin_config});
    firmata_poll($platform, $config->{interval});
  } catch {
    error $_;
  } finally {
    firmata_disconnect($platform);
  }
}


#----------------------------------------------------------------------

#
# Start the program.
#
sub main {
  my $config = read_configuration();
  apply_configuration($config);
  if (stopped()) {
    show_usage();
  } else {
    firmata_start($config);
  }
}

main();
exit $exit_code;
