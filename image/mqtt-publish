#!/bin/sh
#
# Publish firmata message as MQTT message
#
# Arguments: firmata message, e.g.
#
# pin name   value timestamp            duration        count total rate    unit
# 9   boiler 1     1591428675.880354881 2.1215808391571 3     5     1696.85 W
set -eu

MQTT_TOPIC="${MQTT_TOPIC:-firmata}"
MQTT_TOPIC_APPEND_ID="${MQTT_TOPIC_APPEND_ID:-true}"
MQTT_TOPIC_APPEND_FORMAT="${MQTT_TOPIC_APPEND_FORMAT:-true}"

FORMAT_RAW="${FORMAT_RAW:-false}"
FORMAT_RAW_SEPARATOR="${FORMAT_RAW_SEPARATOR:- }"
FORMAT_JSON="${FORMAT_JSON:-true}"

CLIENT_MOSQUITTO="${CLIENT_MOSQUITTO:-true}"
# LOG_FILE (optional)
LOG_FORMAT="${LOG_FORMAT:-%s %s\n}"

cancel() {
  # local set is required because global has no effect, at least in busybox ash
  set -eu
  echo >&2 "Error: ${@}"
  return 1
}

publish() {
  format="${1}"
  id="${2}"
  message="${3}"

  topic="${MQTT_TOPIC}"
  [ ! "${MQTT_TOPIC_APPEND_ID}"     = 'true' ] || topic="${topic}/${id}"
  [ ! "${MQTT_TOPIC_APPEND_FORMAT}" = 'true' ] || topic="${topic}/${format}"
  if [ "${CLIENT_MOSQUITTO}" = 'true' ]; then
    printf "%s " '-t' "${topic}" '-m' "'${message}'" "${MQTT_OPTIONS-}" | xargs mosquitto_pub
  fi
  if [ "${LOG_FILE-}" ]; then
    printf -- "${LOG_FORMAT}" "${topic}" "${message}" >>"${LOG_FILE}"
  fi
}

build_raw_message() {
  printf "%s${FORMAT_RAW_SEPARATOR}" "${@}"
}

build_json_message() {
  [ ! "${#}" -lt "9" ] || cancel "too few arguments: '${@}'"
  cat <<-'EOF' | xargs -0 -I {} jq -n -c --args {} "${@}"
	{
	pin:       $ARGS.positional[0] | tonumber,
	name:      $ARGS.positional[1],
	rate:     ($ARGS.positional[7] | if . == "" then "" else tonumber end),
	unit:      $ARGS.positional[8],
	value:     $ARGS.positional[2] | tonumber,
	timestamp: $ARGS.positional[3] | tonumber,
	duration:  $ARGS.positional[4] | tonumber,
	count:     $ARGS.positional[5] | tonumber,
	total:     $ARGS.positional[6] | tonumber,
	} | del(.[] | select(. == ""))
	EOF
}

main() {
  [ -n "${1-}" ] || cancel "No arguments"
  if [ "${FORMAT_RAW}"  = 'true' ]; then
    publish 'raw' "${1}" "$(build_raw_message "${@}")"
  fi
  if [ "${FORMAT_JSON}" = 'true' ]; then
    publish 'json' "${1}" "$(build_json_message "${@}")"
  fi
}

main "${@}"
